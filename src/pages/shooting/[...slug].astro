---
import { getEntry } from "astro:content";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Card from "../../components/Card.astro";
import MansoryGrid from "../../components/MansoryGrid.astro";

const projectEntries = await getCollection("shootings");

const { slug } = Astro.params;

if (slug === undefined) {
  throw new Error("Slug is required");
}

const entry = await getEntry("shootings", slug);

if (entry === undefined) {
  return Astro.redirect("/404");
}

const videos = [
  {
    video_path: "/spots_on_tv/CasaPariurilorCretu.mp4",
    thumbnail: "/spots_on_tv/CasaPariurilorCover.jpg"
  },
  {
    video_path: "/spots_on_tv/CasaPariurilorCretu.mp4",
    thumbnail: "/spots_on_tv/CasaPariurilorCover.jpg"
  },
  {
    video_path: "/spots_on_tv/CasaPariurilorCretu.mp4",
    thumbnail: "/spots_on_tv/CasaPariurilorCover.jpg"
  },
  {
    video_path: "/spots_on_tv/CasaPariurilorCretu.mp4",
    thumbnail: "/spots_on_tv/CasaPariurilorCover.jpg"
  },
]

---

<Layout title={entry.data.title}>
<div class="relative">
  <div class="mx-auto px-8 md:max-w-7xl">
    <a href="/" class="hover:underline text-lg mb-6 m-0 text-red-600 relative">
        Back Home
    </a>
    <div class="flex items-end">
      <div class="mx-auto max-w-xl pr-5">
        <div class="relative mt-5 mb-0">
          <h2 class="text-center font-light text-4xl -tracking-wider mt-0 mb-8 mx-0">
            <span class="text-[1.5em]">{entry.data.title}</span>
          </h2>
        </div>
      </div>
    </div>

    {entry.data.title === "Spots on TV" ?
      (
        <div class="relative w-full mt-5 mb-10">
          <div class="clear-both relative">
            <div class="grid flex-wrap items-start grid-cols-1 gap-4 lg:grid-cols-3 md:grid-cols-2 portfolio ">
              {videos.map(vid =>
                <figure class="shrink-0 w-full relative">
                  <div class="relative">
                    <video poster={vid.thumbnail} controls>
                      <source src={vid.video_path} type="video/mp4">
                    Your browser does not the video.
                    </video>
                  </div>
                  <div class="pb-0 px-0 py-2">
                    <h3 class="text-black text-xl my-2">
                      REPLACE ME
                    </h3>
                    <p class="text-sm mb-6 m-0 text-red-600 relative">Spots on TV</p>
                  </div>
                </figure>
              )}
            </div>
          </div>
        </div>
      )
      :
      (
        <div class="relative w-full mt-5 mb-10">
          <div class="clear-both relative">
            <div class="grid flex-wrap items-start grid-cols-1 gap-4 lg:grid-cols-3 md:grid-cols-2 portfolio ">
              {entry.data.images.map((img, index) =>
                <Card index={index + 1} slug={"slug"} title={img.image_title} image={img.image} tags={["Commercial"]} />
              )}
            </div>
          </div>
        </div>
      )
    }
  </div>
</div>

<script>
  const masonry = () => {
    const portfolio = document.querySelector(".portfolio");
    let column = 3;

    const responsive = [
      {
        breakpoint: 1280,
        column: 3
      },
      {
        breakpoint: 1024,
        column: 2
      },
      {
        breakpoint: 768,
        column: 1
      }
    ];

    const winWidth = window.innerWidth;

    for (let i = 0; i < responsive.length; i++) {
      if (winWidth <= responsive[i].breakpoint) {
        column = responsive[i].column;
      }
    }

    if (column === 1) {
      const listElms = Array.prototype.slice.call(
        portfolio.querySelectorAll("figure"),
        0
      );
      listElms.forEach((listElm) => {
        listElm.style.marginTop = "";
      });

      return false;
    }

    const listElms = Array.prototype.slice.call(
      portfolio.querySelectorAll("figure"),
      0
    );

    if (listElms.length === 0) {
      return false;
    }

    listElms.forEach((listElm, index) => {
      listElm.style.marginTop = "";

      if (column > index) {
        return;
      }

      const topListElm = listElms[index - column];
      const topListElmPosi = topListElm.getBoundingClientRect().top;
      const topListHeight = getHeightAndMarginBottom(topListElm);
      const topListBottomPosi = topListElmPosi + topListHeight;
      const listElmPosi = listElm.getBoundingClientRect().top;
      let setPosi: string | number = listElmPosi.toFixed(0) - topListBottomPosi.toFixed(0) - 16;

      if (setPosi === 0) {
        return false;
      }

      setPosi = "-" + setPosi + "px";
      listElm.style.marginTop = setPosi;
    });
  };

  const getHeightAndMarginBottom = (elm) => {
    const height = elm.getBoundingClientRect().height;
    const styles = getComputedStyle(elm);
    const bottom = parseFloat(styles.marginBottom);
    return height + bottom;
  };

  masonry();

  window.addEventListener("resize", () => {
    masonry();
  });
  document.addEventListener("DOMContentLoaded", () => {
    masonry();
  });
  document.addEventListener("astro:page-load", () => {
    masonry();
  });
</script>

</Layout>
